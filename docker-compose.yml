# ==============================================================================
# Fichier Docker Compose (VERSION FINALE PROPRE ET SIMPLIFIÉE)
# ==============================================================================

services:
  db:
    image: mysql:8.0
    container_name: mysql_rh_db
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: your_strong_root_password
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3307:3306"
    restart: unless-stopped
    networks:
      - app-network

  redis:
    image: redis:6.2-alpine
    container_name: redis_rh_broker
    restart: unless-stopped
    networks:
      - app-network

  web:
    build: .
    container_name: django_rh_web
    
    # Commande multiligne pour attendre la DB, migrer, puis lancer le serveur
    command: >
      sh -c "echo 'Attente de 10s pour la base de données...' &&
             sleep 10 &&
             echo 'Application des migrations...' &&
             python manage.py migrate &&
             echo 'Lancement du serveur...' &&
             python manage.py runserver 0.0.0.0:8000"
    
    volumes:
      - .:/app
      
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - app-network

  celery:
    build: .
    container_name: celery_rh_worker
    
    # Commande multiligne pour attendre, puis lancer le worker Celery
    command: >
      sh -c "echo 'Attente de 10s pour la base de données...' &&
             sleep 10 &&
             echo 'Lancement du worker Celery...' &&
             python -m celery -A celery_app worker -l info --pool=solo"
    
    volumes:
      - .:/app

    environment:
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      - redis
      - db  # On s'assure que celery attend aussi la DB
    restart: unless-stopped
    networks:
      - app-network

# Déclaration du réseau partagé
networks:
  app-network:
    driver: bridge

# Déclaration du volume pour la persistance des données
volumes:
  mysql_data: