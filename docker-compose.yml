# ==============================================================================
# Fichier Docker Compose pour la "Plateforme RH"
# ==============================================================================

version: '3.8' # Spécifie la version de la syntaxe Docker Compose

services:
  # --- Service 1: La Base de Données MySQL ---
  db:
    image: mysql:8.0 # Utilise l'image officielle de MySQL version 8.0
    container_name: mysql_rh_db
    volumes:
      - mysql_data:/var/lib/mysql # Persiste les données de la DB dans un volume nommé
    environment:
      # Variables d'environnement pour configurer MySQL au premier lancement
      MYSQL_ROOT_PASSWORD: your_strong_root_password
      MYSQL_DATABASE: plateforme_rh
      MYSQL_USER: rh_user
      MYSQL_PASSWORD: your_strong_password
    ports:
      - "3307:3306" # Mappe le port 3306 du conteneur au port 3307 de votre machine locale
    restart: unless-stopped # Redémarre le conteneur s'il plante, sauf si vous l'arrêtez manuellement

  # --- Service 2: Le Broker de Messages Redis ---
  redis:
    image: redis:6.2-alpine # Utilise une image Redis légère
    container_name: redis_rh_broker
    restart: unless-stopped

  # --- Service 3: L'Application Web Django ---
  web:
    build: . # Construit l'image en utilisant le Dockerfile dans le dossier courant
    container_name: django_rh_web
    command: > # La commande pour lancer le serveur Django à l'intérieur du conteneur
      sh -c "python manage.py migrate && 
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app # Monte le dossier local du projet dans /app. Les changements de code sont reflétés en direct.
    ports:
      - "8000:8000" # Mappe le port 8000 du conteneur au port 8000 de votre machine
    depends_on:
      - db      # Indique que ce service doit attendre que `db` soit démarré
      - redis   # et que `redis` soit démarré
    environment:
      # On passe les informations de connexion à la base de données à Django
      - DB_NAME=plateforme_rh
      - DB_USER=rh_user
      - DB_PASSWORD=your_strong_password
      - DB_HOST=db       # Le nom du service de la base de données
      - DB_PORT=3306
      - SECRET_KEY=votre_super_secret_key_pour_la_production # À changer en production !
      - DEBUG=1          # 1 pour True, 0 pour False
    restart: unless-stopped

  # --- Service 4: Le Worker Celery ---
  celery:
    build: . # Utilise la même image que le service web, car il a besoin du même code
    container_name: celery_rh_worker
    command: python -m celery -A celery_app worker -l info --pool=solo
    volumes:
      - .:/app # Partage le même code que le service web
    depends_on:
      - web     # S'assure que le web est prêt (pour les modèles Django)
      - redis   # Dépend de Redis pour la file d'attente
    restart: unless-stopped

# --- Volume Nommé ---
# Définit un volume persistant pour les données MySQL, pour ne pas les perdre
# si le conteneur `db` est supprimé et recréé.
volumes:
  mysql_data: